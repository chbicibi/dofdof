{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ele",
				"elevator"
			],
			[
				"ma",
				"mach_number"
			],
			[
				"an",
				"angle_of_attack"
			],
			[
				"inte",
				"integer"
			],
			[
				"n",
				"n_step"
			],
			[
				"rea",
				"read_input"
			],
			[
				"init",
				"init_aircraft"
			],
			[
				"calc",
				"calc_line"
			],
			[
				"x_",
				"x_max"
			],
			[
				"xm",
				"x_min"
			],
			[
				"lin",
				"liney"
			],
			[
				"plo",
				"plot_data"
			],
			[
				"poi",
				"points"
			],
			[
				"pi",
				"picked"
			],
			[
				"po",
				"points"
			],
			[
				"poin",
				"point_it"
			],
			[
				"ran",
				"rand_it"
			],
			[
				"k",
				"kws"
			],
			[
				"__",
				"__END__"
			],
			[
				"abs",
				"abspath"
			],
			[
				"sho",
				"show_frame"
			],
			[
				"avs",
				"avs_main"
			],
			[
				"retu",
				"return"
			],
			[
				"ta2",
				"ts2aac"
			],
			[
				"te",
				"temp_out"
			],
			[
				"exi",
				"exists"
			],
			[
				"for",
				"from"
			],
			[
				"nam",
				"namedtuple"
			],
			[
				"g",
				"glob"
			],
			[
				"split",
				"split_ts"
			],
			[
				"spli",
				"split"
			],
			[
				"spl",
				"split"
			],
			[
				"conte",
				"content_type"
			],
			[
				"com",
				"compile"
			],
			[
				"tss",
				"TsSplitter"
			],
			[
				"get",
				"getsize"
			],
			[
				"new",
				"new_file"
			],
			[
				"TSS",
				"TSSPLITTER"
			],
			[
				"comp",
				"COMPUTERNAME"
			],
			[
				"sta",
				"startswith"
			],
			[
				"true",
				"True"
			],
			[
				"NHK",
				"NHK総合・東京"
			],
			[
				"ext",
				"extname"
			],
			[
				"q",
				"quality"
			],
			[
				"temp",
				"Temp"
			],
			[
				"aa",
				"aac_cache"
			],
			[
				"star",
				"startswith"
			],
			[
				"stop",
				"stopwatch"
			],
			[
				"re",
				"recursive"
			],
			[
				"e",
				"extname"
			],
			[
				"st",
				"store"
			],
			[
				"x265",
				"x265_opt"
			],
			[
				"sh",
				"show_frame"
			],
			[
				"tab",
				"table_new"
			],
			[
				"file",
				"files"
			],
			[
				"cre",
				"create_json"
			],
			[
				"lo",
				"lock"
			],
			[
				"ret",
				"return"
			],
			[
				"is",
				"isfile"
			],
			[
				"return",
				"returncode"
			],
			[
				"cm",
				"cmd_s"
			],
			[
				"call",
				"call_cmd"
			],
			[
				"cmd",
				"cmd_s"
			],
			[
				"pr",
				"print_"
			],
			[
				"aac",
				"aac_file"
			],
			[
				"d2",
				"d2v_file"
			],
			[
				"base",
				"basename"
			],
			[
				"ifi",
				"ifile_a"
			],
			[
				"ts",
				"ts2aac"
			],
			[
				"in",
				"input"
			],
			[
				"su",
				"subject"
			],
			[
				"from",
				"from_json"
			],
			[
				"fi",
				"figsize"
			],
			[
				"fra",
				"frame_cache"
			],
			[
				"max",
				"max_no"
			],
			[
				"di",
				"dictf"
			],
			[
				"mat",
				"matches"
			],
			[
				"wo",
				"work_dir_c"
			],
			[
				"test",
				"testdir"
			],
			[
				"down",
				"downloading"
			],
			[
				"li",
				"live_id"
			],
			[
				"ms",
				"msgs"
			],
			[
				"sen",
				"send_email"
			],
			[
				"dow",
				"downloading"
			],
			[
				"time",
				"time2str"
			],
			[
				"pla",
				"playlist"
			],
			[
				"min",
				"wait_min"
			],
			[
				"sc",
				"screenshot"
			],
			[
				"copy",
				"copydriver"
			],
			[
				"dri",
				"drivers"
			],
			[
				"slee",
				"sleep_sec"
			],
			[
				"dat",
				"datetime"
			],
			[
				"se",
				"self"
			],
			[
				"x",
				"xhr"
			],
			[
				"play",
				"playlist"
			],
			[
				"th",
				"thread"
			],
			[
				"en",
				"entrys"
			],
			[
				"sup",
				"subprocess"
			],
			[
				"con",
				"concat_head"
			],
			[
				"concat",
				"concat_video"
			],
			[
				"ent",
				"entry"
			],
			[
				"m",
				"message"
			],
			[
				"D",
				"DESKTOP"
			],
			[
				"live",
				"live_id"
			],
			[
				"ope",
				"open_chrome"
			],
			[
				"opr",
				"open_chrome"
			],
			[
				"CHR",
				"CHROME_EXE"
			],
			[
				"che",
				"checkdup"
			],
			[
				"list",
				"listdir"
			],
			[
				"P",
				"PStream"
			],
			[
				"I",
				"INPUT_PATH"
			],
			[
				"tota",
				"total_size"
			],
			[
				"ar",
				"args"
			],
			[
				"pa",
				"pardir"
			],
			[
				"files",
				"files_mx"
			],
			[
				"Dir",
				"directory"
			],
			[
				"TEST_OPT_",
				"TEST_OPT_B"
			],
			[
				"total",
				"total_seconds"
			],
			[
				"la",
				"last_run"
			],
			[
				"sto",
				"store_cmd"
			],
			[
				"ENC",
				"ENCODE_CMD"
			],
			[
				"d2v",
				"d2v_list"
			],
			[
				"cop",
				"copy_audio"
			],
			[
				"enco",
				"encoding"
			],
			[
				"threa",
				"thread"
			],
			[
				"sub",
				"subprocess"
			],
			[
				"dir",
				"dirs"
			],
			[
				"ta",
				"targets"
			]
		]
	},
	"buffers":
	[
		{
			"file": "dofdof.sublime-project",
			"settings":
			{
				"buffer_size": 429,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/yam/Studies/Projects/SixDoF/src/dof_main.f95",
			"settings":
			{
				"buffer_size": 2765,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/yam/Studies/Projects/SixDoF/.gitignore",
			"settings":
			{
				"buffer_size": 29,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/yam/Studies/Projects/SixDoF/src/util.f08",
			"settings":
			{
				"buffer_size": 16638,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "0                       !機体諸元・環境設定\n1.190110 9.8            !空気密度,重力加速度\n340                     !代表音速\n70000                   !機体重量\n175                     !代表面積\n9.72 23.6               !機体MAC長、翼スパン\n1194200 2939800 3927300 !主慣性モーメント\n0 119420                !慣性乗積\n0                       !慣性乗積2\n10 0.01                 !計算終了時間（飛行時間）、計算刻み幅\n0 0 10000.0             !初期位置(x, y, z)\n120 0 5                 ! 142.458 0 7.52362 !初期速度（u, v, w)\n0 0 0                   !初期角速度(p, q, r)\n0 -4 0                  !初期角度（ロール,ピッチ,ヨー）\n8.0                     ! θ目標値\nout_l2.csv              ! 出力ファイル名(csv形式)\n-11.0                   !初期舵角(degree)\n",
			"file": "/C/yam/Studies/Projects/SixDoF/src/initial_cond.inp",
			"file_size": 744,
			"file_write_time": 131946115428780939,
			"settings":
			{
				"buffer_size": 627,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Unix",
				"scratch": true
			}
		},
		{
			"file": "/C/yam/Studies/Projects/SixDoF/src/dof_kriging.f08",
			"settings":
			{
				"buffer_size": 4695,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/yam/Studies/Projects/SixDoF/src/dof_rk4.f95",
			"settings":
			{
				"buffer_size": 8437,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "!=======================================================================\n!         6DoF EOM solver\n!=======================================================================\n\nmodule global\n    implicit none\n\n    ! 定数\n    real(8), parameter :: pi = 4 * atan(1d0)\n    real(8), parameter :: radians = pi / 180d0\n    real(8), parameter :: degrees = 180d0 / pi\n\n    integer :: n_step\n    real(8) :: time_end, delta_t\n\n    real(8) :: grav, s_ref, m_body, rho, mac, b_span\n    real(8) :: cx, cy, cz, cl, cm, cn\n    real(8) :: ix, iy, iz, ixy, ixz, iyz\n\n    real(8) :: sonic_speed\n\n    real(8) x_start, y_start, z_start\n    real(8) u_start, v_start, w_start\n    real(8) p_start, q_start, r_start\n    real(8) phi_start, tht_start, psi_start\n    real(8) cx_g, cm_g, cz_g\n    real(8) x_thrust\n\n    real(8) ei\n    real(8) cx_pred, cy_pred, cz_pred\n    real(8) cl_pred, cm_pred, cn_pred\nend module global\n\n\nmodule equation\n    use global\n    implicit none\n\n    contains\n\n    !=======================================================================\n    !     function of EOM ( 6 degrees of freedom )\n    !=======================================================================\n\n    !-------translational motion\n    real(8) function fu(velocity, q, w, r, v, tht)\n        real(8), intent(in) :: velocity, q, w, r, v, tht\n\n        fu = -q * w + r * v - grav * sin(tht) &\n           + rho * velocity ** 2 * s_ref * cx / (2 * m_body)\n    end function fu\n\n\n    real(8) function fv(velocity, r, u, p, w, tht, phi)\n        real(8), intent(in) :: velocity, r, u, p, w, tht, phi\n\n        fv = -r * u + p * w + grav * cos(tht) * sin(phi) &\n           + rho * velocity ** 2 * s_ref * cy / (2 * m_body)\n    end function fv\n\n\n    real(8) function fw(velocity, p, v, q, u, tht, phi)\n        real(8), intent(in) :: velocity, p, v, q, u, tht, phi\n\n        fw = -p * v + q * u + grav * cos(tht) * cos(phi) &\n           + rho * velocity ** 2 * s_ref * cz / (2 * m_body)\n    end function fw\n\n\n    !-------angular acceleration\n    real(8) function fp(velocity, p, q, r)\n        real(8), intent(in) :: velocity, p, q, r\n        real(8) :: roll, yaw\n\n        roll = ((iy - iz) * q * r + ixz * p * q) &\n             + rho * velocity ** 2 * s_ref * b_span * cl / 2\n        yaw = ((ix - iy) * p * q - ixz * q * r) &\n            + rho * velocity ** 2 * s_ref * b_span * cn / 2\n        fp = (roll / ix + ixz / ix * yaw / iz) / (1 - ixz ** 2 / (ix * iz))\n    end function fp\n\n\n    real(8) function fq(velocity, p, r)\n        real(8), intent(in) :: velocity, p, r\n        real(8) :: pitch\n\n        pitch = (((iz - ix) * r * p) + ((ixz * (r ** 2 - p ** 2)))) &\n              + ((rho * (velocity ** 2) * s_ref * mac * cm) / 2)\n        fq = (pitch / iy)\n    end function fq\n\n\n    real(8) function fr(velocity, p, q, r)\n        real(8), intent(in) :: velocity, p, q, r\n        real(8) :: roll, yaw\n\n        roll = ((iy-iz) * q*r)+(ixz*p*q) &\n             + ((rho*(velocity**2) * s_ref*b_span*cl)/2)\n        yaw = ((ix-iy) * p*q)-(ixz*q*r) &\n            + ((rho*(velocity**2) * s_ref*b_span*cn)/2)\n        fr = (((yaw/iz)+(ixz/iz) * (roll/ix))/(1.d0-((ixz**2)/(ix*iz))))\n    end function fr\n\n\n    !-------attitude angle\n    real(8) function fpsi(q, r, phi, tht)\n        real(8), intent(in) :: q, r, phi, tht\n\n        fpsi = ((r*cos(phi)+q*sin(phi))/(cos(tht)))\n    end function fpsi\n\n\n    real(8) function ftht(q, r, phi, tht)\n        real(8), intent(in) :: q, r, phi, tht\n\n        ftht = (q*cos(phi)-r*sin(phi))\n    end function ftht\n\n\n    real(8) function fphi(p, q, r, phi, tht)\n        real(8), intent(in) :: p, q, r, phi, tht\n\n        fphi =(p+(r*cos(phi)+q*sin(phi)) * tan(tht))\n    end function fphi\n\n\n    subroutine rk4(u, v, w, p, q, r, phi, tht, psi,     &\n        u_next, v_next, w_next, p_next, q_next, r_next, &\n        phi_next, tht_next, psi_next)\n\n        real(8), intent(in) :: u, v, w, p, q, r, phi, tht, psi\n        real(8), intent(out) :: u_next, v_next, w_next\n        real(8), intent(out) :: p_next, q_next, r_next\n        real(8), intent(out) :: phi_next, tht_next, psi_next\n\n        real(8) :: k1_u, k1_v, k1_w\n        real(8) :: k2_u, k2_v, k2_w\n        real(8) :: k3_u, k3_v, k3_w\n        real(8) :: k4_u, k4_v, k4_w\n\n        real(8) :: k1_p, k1_q, k1_r\n        real(8) :: k2_p, k2_q, k2_r\n        real(8) :: k3_p, k3_q, k3_r\n        real(8) :: k4_p, k4_q, k4_r\n\n        real(8) :: k1_phi, k1_tht, k1_psi\n        real(8) :: k2_phi, k2_tht, k2_psi\n        real(8) :: k3_phi, k3_tht, k3_psi\n        real(8) :: k4_phi, k4_tht, k4_psi\n\n        real(8) :: velocity\n\n        velocity = sqrt(u ** 2 + v ** 2 + w ** 2)\n\n        !-------------------k1\n        k1_u = delta_t * fu(velocity, q, w, r, v, tht)\n        k1_v = delta_t * fv(velocity, r, u, p, w, tht, phi)\n        k1_w = delta_t * fw(velocity, p, v, q, u, tht, phi)\n\n        k1_p = delta_t * fp(velocity, p, q, r)\n        k1_q = delta_t * fq(velocity, p, r)\n        k1_r = delta_t * fr(velocity, p, q, r)\n\n        k1_psi = delta_t * fpsi(q, r, phi, tht)\n        k1_tht = delta_t * ftht(q, r, phi, tht)\n        k1_phi = delta_t * fphi(p, q, r, phi, tht)\n        !-------------------k2\n        k2_u = delta_t * fu(velocity, q+k1_q/2, w+k1_w/2, r+k1_r/2, v+k1_v/2, tht+k1_tht/2)\n        k2_v = delta_t * fv(velocity, r+k1_r/2, u+k1_u/2, p+k1_p/2, w+k1_w/2, tht+k1_tht/2, phi+k1_phi/2)\n        k2_w = delta_t * fw(velocity, p+k1_p/2, v+k1_v/2, q+k1_q/2, u+k1_u/2, tht+k1_tht/2, phi+k1_phi/2)\n\n        k2_p = delta_t * fp(velocity, p+k1_p/2, q+k1_q/2, r+k1_r/2)\n        k2_q = delta_t * fq(velocity, p+k1_p/2, r+k1_r/2)\n        k2_r = delta_t * fr(velocity, p+k1_p/2, q+k1_q/2, r+k1_r/2)\n\n        k2_psi = delta_t * fpsi(q+k1_q/2, r+k1_r/2, phi+k1_phi/2, tht+k1_tht/2)\n        k2_tht = delta_t * ftht(q+k1_q/2, r+k1_r/2, phi+k1_phi/2, tht+k1_tht/2)\n        k2_phi = delta_t * fphi(p+k1_p/2, q+k1_q/2, r+k1_r/2, phi+k1_phi/2, tht+k1_tht/2)\n        !-------------------k3\n        k3_u = delta_t * fu(velocity, q+k2_q/2, w+k2_w/2, r+k2_r/2, v+k2_v/2, tht+k2_tht/2)\n        k3_v = delta_t * fv(velocity, r+k2_r/2, u+k2_u/2, p+k2_p/2, w+k2_w/2, tht+k2_tht/2, phi+k2_phi/2)\n        k3_w = delta_t * fw(velocity, p+k2_p/2, v+k2_v/2, q+k2_q/2, u+k2_u/2, tht+k2_tht/2, phi+k2_phi/2)\n\n        k3_p = delta_t * fp(velocity, p+k2_p/2, q+k2_q/2, r+k2_r/2)\n        k3_q = delta_t * fq(velocity, p+k2_p/2, r+k2_r/2)\n        k3_r = delta_t * fr(velocity, p+k2_p/2, q+k2_q/2, r+k2_r/2)\n\n        k3_psi = delta_t * fpsi(q+k2_q/2, r+k2_r/2, phi+k2_phi/2, tht+k2_tht/2)\n        k3_tht = delta_t * ftht(q+k2_q/2, r+k2_r/2, phi+k2_phi/2, tht+k2_tht/2)\n        k3_phi = delta_t * fphi(p+k2_p/2, q+k2_q/2, r+k2_r/2, phi+k2_phi/2, tht+k2_tht/2)\n        !-------------------k4\n        k4_u = delta_t * fu(velocity, q+k3_q, w+k3_w, r+k3_r, v+k3_v, tht+k3_tht)\n        k4_v = delta_t * fv(velocity, r+k3_r, u+k3_u, p+k3_p, w+k3_w, tht+k3_tht, phi+k3_phi)\n        k4_w = delta_t * fw(velocity, p+k3_p, v+k3_v, q+k3_q, u+k3_u, tht+k3_tht, phi+k3_phi)\n\n        k4_p = delta_t * fp(velocity, p+k3_p, q+k3_q, r+k3_r)\n        k4_q = delta_t * fq(velocity, p+k3_p, r+k3_r)\n        k4_r = delta_t * fr(velocity, p+k3_p, q+k3_q, r+k3_r)\n\n        k4_psi = delta_t * fpsi(q+k3_q, r+k3_r, phi+k3_phi, tht+k3_tht)\n        k4_tht = delta_t * ftht(q+k3_q, r+k3_r, phi+k3_phi, tht+k3_tht)\n        k4_phi = delta_t * fphi(p+k3_p, q+k3_q, r+k3_r, phi+k3_phi, tht+k3_tht)\n        !-------------------output for eis-------------------------------------\n\n        u_next = u + (k1_u+(2*k2_u)+(2*k3_u)+k4_u)/6d0\n        v_next = v + (k1_v+(2*k2_v)+(2*k3_v)+k4_v)/6d0\n        w_next = w + (k1_w+(2*k2_w)+(2*k3_w)+k4_w)/6d0\n\n        p_next = p + (k1_p+(2*k2_p)+(2*k3_p)+k4_p)/6d0\n        q_next = q + (k1_q+(2*k2_q)+(2*k3_q)+k4_q)/6d0\n        r_next = r + (k1_r+(2*k2_r)+(2*k3_r)+k4_r)/6d0\n\n        phi_next = phi + (k1_phi+(2*k2_phi)+(2*k3_phi)+k4_phi)/6d0\n        tht_next = tht + (k1_tht+(2*k2_tht)+(2*k3_tht)+k4_tht)/6d0\n        psi_next = psi + (k1_psi+(2*k2_psi)+(2*k3_psi)+k4_psi)/6d0\n    end subroutine rk4\n\nend module equation\n\n\nmodule flight\n    use global\n    implicit none\n\n    type :: aircraft\n        real(8) :: x, y, z ! 位置\n        real(8) :: u, v, w ! 速度\n        real(8) :: p, q, r ! 角速度\n        real(8) :: phi, theta, psi ! 角度\n\n        real(8) :: u_earth, v_earth, w_earth\n        real(8) :: velocity\n        real(8) :: mach_number\n        real(8) :: angle_of_attack\n\n        real(8) :: elevator\n\n        contains\n\n        procedure :: set_state\n    end type aircraft\n\n    contains\n\n    subroutine set_state(self)\n        class(aircraft), intent(inout) :: self\n        real(8) :: velocity, angle_of_attack, mach_number\n        real(8) :: u_earth, v_earth, w_earth\n        real(8) :: tht, phi, psi\n\n        phi = self%phi\n        tht = self%theta\n        psi = self%psi\n\n        velocity        = sqrt(self%u ** 2 + self%v ** 2 + self%w ** 2)\n        angle_of_attack = atan(self%w / self%u)\n        mach_number     = velocity / sonic_speed\n\n        u_earth = cos(tht) * cos(psi) * self%u   &\n                + (sin(phi) * sin(tht) * cos(psi)  &\n                   - cos(phi) * sin(psi)) * self%v &\n                + (cos(phi) * sin(tht) * cos(psi)  &\n                   + sin(phi) * sin(psi)) * self%w\n\n        v_earth = cos(tht) * sin(psi) * self%u   &\n                + (sin(phi) * sin(tht) * sin(psi)  &\n                   + cos(phi) * cos(psi)) * self%v &\n                + (cos(phi) * sin(tht) * sin(psi)  &\n                   - sin(phi) * cos(psi)) * self%w\n\n        w_earth = sin(tht) * self%u              &\n                - sin(phi) * cos(tht) * self%v  &\n                - cos(phi) * cos(tht) * self%w\n\n        self%u_earth = u_earth\n        self%v_earth = v_earth\n        self%w_earth = w_earth\n        self%velocity = velocity\n        self%mach_number = mach_number\n        self%angle_of_attack = angle_of_attack\n    end subroutine set_state\n\nend module flight\n\n\nprogram test\n    use global\n    use flight\n    use equation\n    use dof_kriging\n    implicit none\n\n    type(aircraft), allocatable :: ac(:)\n    integer :: i\n\n    call init\n\n    print *, 1, ac(1)%x, ac(1)%z\n    do i = 2, n_step\n\n        cx = estimate(1, ac(i)%angle_of_attack, ac(i)%elevator, ac(i)%mach_number)\n        cm = estimate(2, ac(i)%angle_of_attack, ac(i)%elevator, ac(i)%mach_number)\n        cz = estimate(3, ac(i)%angle_of_attack, ac(i)%elevator, ac(i)%mach_number)\n\n        call calc_motion(ac(i-1), ac(i))\n        call ac(i)%set_state\n        print *, i, ac(i)%x, ac(i)%z\n    end do\n\n    contains\n\n    ! ======================================================\n    ! 初期化\n    ! ======================================================\n\n    subroutine init\n        call read_input\n        n_step = time_end / delta_t\n        allocate(ac(n_step))\n\n        call load_krig(num_var=3)\n\n        call init_aircraft(ac(1))\n        call ac(1)%set_state\n    end subroutine init\n\n\n    subroutine read_input\n        integer :: unit\n\n        open(newunit=unit, file='initial_cond.inp', status=\"old\")\n        read(unit, *)\n        read(unit, *) rho, grav\n        read(unit, *) sonic_speed\n        read(unit, *) m_body\n        read(unit, *) s_ref\n        read(unit, *) mac, b_span\n        read(unit, *) ix, iy, iz\n        read(unit, *) ixy, ixz\n        read(unit, *) iyz\n        read(unit, *) time_end, delta_t\n        read(unit, *) x_start, y_start, z_start\n        read(unit, *) u_start, v_start, w_start\n        read(unit, *) p_start, q_start, r_start\n        read(unit, *) phi_start, tht_start, psi_start\n        close(unit)\n\n        u_start = radians * u_start\n        v_start = radians * v_start\n        w_start = radians * w_start\n        phi_start = radians * phi_start\n        tht_start = radians * tht_start\n        psi_start = radians * psi_start\n    end subroutine read_input\n\n\n    subroutine init_aircraft(ac)\n        type(aircraft), intent(inout) :: ac\n        ac%x = x_start\n        ac%y = y_start\n        ac%z = z_start\n        ac%u = u_start\n        ac%v = v_start\n        ac%w = w_start\n        ac%p = p_start\n        ac%q = q_start\n        ac%r = r_start\n        ac%phi = phi_start\n        ac%theta = tht_start\n        ac%psi = psi_start\n        ac%elevator = 0\n    end subroutine init_aircraft\n\n\n    subroutine calc_motion(ac_in, ac_out)\n        type(aircraft), intent(in) :: ac_in\n        type(aircraft), intent(out) :: ac_out\n\n        call rk4(ac_in%u, ac_in%v, ac_in%w, ac_in%p, ac_in%q, ac_in%r, &\n                 ac_in%phi, ac_in%theta, ac_in%psi, &\n                 ac_out%u, ac_out%v, ac_out%w, ac_out%p, ac_out%q, ac_out%r, &\n                 ac_out%phi, ac_out%theta, ac_out%psi)\n\n        call ac_out%set_state\n\n        ac_out%x = ac_in%x + ac_out%u_earth * delta_t\n        ac_out%y = ac_in%y + ac_out%v_earth * delta_t\n        ac_out%z = ac_in%z + ac_out%w_earth * delta_t\n    end subroutine calc_motion\n\nend program test\n\nmodule dll\n    use global\n    use flight\n    use equation\n    use dof_kriging\n    implicit none\n\n    type(aircraft), allocatable :: ac(:)\n    integer :: i\n\n    call init\n\n    print *, 1, ac(1)%x, ac(1)%z\n    do i = 2, n_step\n\n        cx = estimate(1, ac(i)%angle_of_attack, ac(i)%elevator, ac(i)%mach_number)\n        cm = estimate(2, ac(i)%angle_of_attack, ac(i)%elevator, ac(i)%mach_number)\n        cz = estimate(3, ac(i)%angle_of_attack, ac(i)%elevator, ac(i)%mach_number)\n\n        call calc_motion(ac(i-1), ac(i))\n        call ac(i)%set_state\n        print *, i, ac(i)%x, ac(i)%z\n    end do\n\n    contains\n\n    ! ======================================================\n    ! 初期化\n    ! ======================================================\n\n    subroutine init\n        call read_input\n        n_step = time_end / delta_t\n        allocate(ac(n_step))\n\n        call load_krig(num_var=3)\n\n        call init_aircraft(ac(1))\n        call ac(1)%set_state\n    end subroutine init\n\n\n    subroutine read_input\n        integer :: unit\n\n        open(newunit=unit, file='initial_cond.inp', status=\"old\")\n        read(unit, *)\n        read(unit, *) rho, grav\n        read(unit, *) sonic_speed\n        read(unit, *) m_body\n        read(unit, *) s_ref\n        read(unit, *) mac, b_span\n        read(unit, *) ix, iy, iz\n        read(unit, *) ixy, ixz\n        read(unit, *) iyz\n        read(unit, *) time_end, delta_t\n        read(unit, *) x_start, y_start, z_start\n        read(unit, *) u_start, v_start, w_start\n        read(unit, *) p_start, q_start, r_start\n        read(unit, *) phi_start, tht_start, psi_start\n        close(unit)\n\n        u_start = radians * u_start\n        v_start = radians * v_start\n        w_start = radians * w_start\n        phi_start = radians * phi_start\n        tht_start = radians * tht_start\n        psi_start = radians * psi_start\n    end subroutine read_input\n\n\n    subroutine init_aircraft(ac)\n        type(aircraft), intent(inout) :: ac\n        ac%x = x_start\n        ac%y = y_start\n        ac%z = z_start\n        ac%u = u_start\n        ac%v = v_start\n        ac%w = w_start\n        ac%p = p_start\n        ac%q = q_start\n        ac%r = r_start\n        ac%phi = phi_start\n        ac%theta = tht_start\n        ac%psi = psi_start\n        ac%elevator = 0\n    end subroutine init_aircraft\n\n\n    subroutine calc_motion(ac_in, ac_out)\n        type(aircraft), intent(in) :: ac_in\n        type(aircraft), intent(out) :: ac_out\n\n        call rk4(ac_in%u, ac_in%v, ac_in%w, ac_in%p, ac_in%q, ac_in%r, &\n                 ac_in%phi, ac_in%theta, ac_in%psi, &\n                 ac_out%u, ac_out%v, ac_out%w, ac_out%p, ac_out%q, ac_out%r, &\n                 ac_out%phi, ac_out%theta, ac_out%psi)\n\n        call ac_out%set_state\n\n        ac_out%x = ac_in%x + ac_out%u_earth * delta_t\n        ac_out%y = ac_in%y + ac_out%v_earth * delta_t\n        ac_out%z = ac_in%z + ac_out%w_earth * delta_t\n    end subroutine calc_motion\nend module dll",
			"file": "/C/yam/Studies/Projects/SixDoF/src/dofdof.f08",
			"file_size": 13226,
			"file_write_time": 131946134055795839,
			"settings":
			{
				"buffer_size": 15748,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/yam/Studies/Projects/SixDoF/src/setup.bat",
			"settings":
			{
				"buffer_size": 781,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pcr",
		"selected_items":
		[
			[
				"pcr",
				"Package Control: Remove Package"
			],
			[
				"pcrp",
				"Package Control: Remove Package"
			],
			[
				"Pack",
				"Package Control: Install Package"
			]
		],
		"width": 484.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/yam/Studies/Projects/SixDoF",
		"/C/yam/Studies/Projects/SixDoF/src"
	],
	"file_history":
	[
		"/C/yam/Studies/Projects/SixDoF/kriging.inp",
		"/C/yam/Studies/Projects/SixDoF/src/Makefile",
		"/C/yam/Studies/Projects/SixDoF/src/dof_kriging.f95",
		"/C/yam/Studies/Projects/SixDoF/src/dof_flight.f95",
		"/C/yam/Studies/Projects/SixDoF/src/dof_rk4.f95",
		"/C/yam/Studies/Projects/SixDoF/src/dof_main.f95",
		"/C/yam/Studies/Projects/SixDoF/initial_cond.inp",
		"/C/yam/Studies/Projects/SixDoF/dofdof.f08",
		"/F/Check/del.rb",
		"/D/Tools/aviutl100/exe_files/qaac.txt",
		"/D/P/nico/encode_prog.txt",
		"/D/P/nico/encode.log",
		"/D/Movie/カーズ/trim.json",
		"/D/Movie/カーズ/カーズ(吹替版) [WOWOWプライム] 2018年11月13日(火)16時30分.d2v",
		"/D/Movie/カーズ/CK_カーズ(吹替版) [WOWOWプライム] 2018年11月13日(火)16時30分.avs",
		"/D/Movie/カーズ/aut.py",
		"/D/Movie/1710_ROBOMASTERS THE ANIMATED SERIES/ロボマスターズ episode1 [WOWOWプライム] 2017年10月20日(金)22時00分_HD-1.ts.avs",
		"/D/Movie/1710_ROBOMASTERS THE ANIMATED SERIES/trim.json",
		"/D/Movie/1604_文豪ストレイドッグス/trim.json",
		"/D/Tools/aviutl100/ts2aac_tsD&D用-B.bat.lnk",
		"/D/Tools/aviutl100/exe_files/ts2aac/ts2aac_tsD&D用-B.bat",
		"/D/TSRec/1901_えんどろ～！/えんどろ～！ ろ～る5「私の勇者様～！」 [BS11] 2019年02月09日(土)25時00分 [REC]_PLAY.avs",
		"/D/P/nico/tssplitter.json",
		"/D/TSRec/1901_えんどろ～！/えんどろ～！ ろ～る5「私の勇者様～！」 [BS11] 2019年02月09日(土)25時00分.d2v",
		"/C/yam/Studies/Projects/vae_mnist/vis.py",
		"/F/Playlist/store/enc_20190206_114600_4705.d2v",
		"/F/Playlist/store/enc_20190206_114600_4705.avs",
		"/F/Playlist/store/test/enc_20190209_200205_8802.avs",
		"/G/Enc/1801_七つの美徳/enc_20190209_180610_1605.avs",
		"/F/TSRec/1701_BanG Dream!/trim.json",
		"/D/TSRec/1901_私に天使が舞い降りた！/私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分 [REC]_PLAY.avs",
		"/D/TSRec/1901_BanG Dream! 2nd Season/BanG Dream！ 2nd Season #02「黒き咆哮」 [BS11] 2019年01月10日(木)23時30分.lock",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test_0.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test_1.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test_2.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test_3.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test_4.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分_test_5.avs",
		"/D/TSRec/1901_私に天使が舞い降りた！/ts/CK_私に天使が舞い降りた！ 第5話「いいから私にまかせなさい！」 [BS11] 2019年02月06日(水)24時00分 [REC]_.avs",
		"/D/R/xml/list_458.xml",
		"/D/TSRec/1810_ラディアン/アニメ ラディアン 一挙アンコール 復路 [NHKEテレ東京] 2019年01月03日(木)09時05分.d2v",
		"/D/TSRec/1810_ラディアン/trim.json",
		"/F/Playlist/1807_ハッピーシュガーライフ/trim.json",
		"/F/Playlist/store/ダーウィンが来た！「まるで歩く掘削機！アフリカの珍獣ツチブタ」 [NHK総合・東京] 2019年02月03日(日)19時30分.ts.avs",
		"/D/P/a.py",
		"/D/Temp/Movie/1710_ROBOMASTERS THE ANIMATED SERIES/trim.json",
		"/D/Temp/Movie/0000_新世紀ヱヴァンゲリヲン/store/trim.json",
		"/F/Playlist/Eテレ2355/Eテレ2355 [NHKEテレ東京] 2018年03月30日(金)23時55分_HD-1 [REC].mp4.log",
		"/F/Playlist/Eテレ2355/enc_20190203_170439_3446.avs",
		"/F/Playlist/あなたも絶対行きたくなる！日本「最強の城」スペシャル「第2弾」 [NHK総合・東京] 2018年12月31日(月)16時00分.ts.avs",
		"/D/P/nvenc.txt",
		"/D/P/x265.txt",
		"/D/P/nico/title_table.json",
		"/D/P/nico/live_info.json",
		"/C/yam/Studies/Projects/rnn_chainer/.gitignore",
		"/F/Playlist/1901_えんどろ～！/trim.json",
		"/F/Playlist/1810_アニマエール！/trim.json",
		"/D/P/nico/list.html",
		"/D/P/nico/live.py",
		"/C/yam/Studies/Projects/FEC/src/kriging.f08",
		"/F/Playlist/1901_えんどろ～！/えんどろ～！ ろ～る1 [BS11] 2019年01月12日(土)25時00分 [REC].mp4_play.avs",
		"/D/Temp/Movie/名探偵コナン/player.avs",
		"/D/Temp/Movie/名探偵コナン/trim.json",
		"/D/Temp/Movie/映画ドラえもん/映画ドラえもん #22 のび太と翼の勇者たち [WOWOWシネマ] 2018年05月30日(水)08時00分.d2v",
		"/F/Playlist/1901_私に天使が舞い降りた！/trim.json",
		"/C/yam/Paper/参考文献.txt",
		"/D/Temp/Movie/映画ドラえもん/trim.json",
		"/F/Playlist/1901_えんどろ～！/えんどろ～！ ろ～る2 [BS11] 2019年01月19日(土)25時00分 [REC].mp4_play.xml",
		"/S/NicoRec/new/2019年01月19日(土)25時00分 【TV同時放送】「えんどろ～！」2話上映会 『第2話』_lv317887472_10min_vote=888.xml",
		"/D/Temp/Movie/名探偵コナン/enc_20190122_033918_6595.avs",
		"/D/P/nico/.git/config",
		"/F/Playlist/1901_えんどろ～！/えんどろ～！ ろ～る1 [BS11] 2019年01月12日(土)25時00分.d2v",
		"/D/Temp/Movie/名探偵コナン/avs.py",
		"/F/Playlist/1901_私に天使が舞い降りた！/私に天使が舞い降りた！ 第2話「サイキョーにカワイイ」 [BS11] 2019年01月16日(水)24時00分 [REC].mp4_play.xml",
		"/S/NicoRec/new/2019年01月15日(火)24時30分 【TV同時放送】「私に天使が舞い降りた！」2話上映会 『第2話「サイキョーにカワイイ」』_lv317629388_10min_vote=925.xml",
		"/F/Playlist/1901_私に天使が舞い降りた！/enc_20190116_100723_1425.avs",
		"/F/Playlist/1901_私に天使が舞い降りた！/enc_20190119_112606_8221.log",
		"/C/yam/Temp/from_kishi/anova/src/kga.f",
		"/C/yam/Temp/from_kishi/anova/src/imatrx.f",
		"/C/yam/Temp/from_kishi/anova/src/anova2.1.f",
		"/C/yam/Temp/from_kishi/anova/src/anova2_1.f",
		"/C/yam/Temp/from_kishi/anova/src/kga.inc",
		"/C/yam/Temp/from_kishi/anova/src/eval.inc",
		"/C/yam/Temp/from_kishi/anova/src/krig.inc",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/rank1_para.dat",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/rank1.dat",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/krig/src/skriging2.1.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/krig/src/lhs.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/krig/src/kga.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/krig/src/imatrx.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/krig/src/cvarid.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ei_s/src/skriging_eis2.1_3.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ei_s/src/skriging_eis2.1_2.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ei_s/src/skriging_eis2.1_1.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ei_s/src/kga.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ei_s/src/skriging_eis2.1.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ei_s/src/imatrx.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/fort.1000",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/sub_repro_old.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/sub_repro.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/sub_rank.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/sub_evalu.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/div_ga.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/input.txt",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/sub_divid.f",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/ga/src/ga.inc",
		"/C/yam/Temp/from_kishi/krigGA_2obj_v2_共研データ/install.sh",
		"/F/Playlist/1901_私に天使が舞い降りた！/私に天使が舞い降りた！ 第1話「もにょっとした気持ち」 [BS11] 2019年01月09日(水)24時00分 [REC].mp4_play.avs",
		"/C/yam/Studies/Projects/AE_chainer/ae_chainer/task4/__local__/ae_chainer3.sublime-workspace",
		"/C/yam/Studies/Projects/AE_chainer/ae_chainer/task4/__local__/ae_chainer3.sublime-project",
		"/F/Playlist/1901_私に天使が舞い降りた！/私に天使が舞い降りた！ 第1話「もにょっとした気持ち」 [BS11] 2019年01月09日(水)24時00分 [REC].avs",
		"/D/Temp/Movie/名探偵コナン/名探偵コナン ベイカー街(ストリート)の亡霊 [WOWOWプライム] 2018年07月25日(水)12時10分 [REC].mp4_play.avs",
		"/D/Temp/Movie/名探偵コナン/enc_20190118_233655_4704.avs",
		"/D/Temp/Movie/名探偵コナン/名探偵コナン ベイカー街(ストリート)の亡霊 [WOWOWプライム] 2018年07月25日(水)12時10分.ts.avs",
		"/D/Temp/Movie/名探偵コナン/名探偵コナン ベイカー街(ストリート)の亡霊 [WOWOWプライム] 2018年07月25日(水)12時10分.avs",
		"/D/Temp/Movie/名探偵コナン/enc_20190118_133635_1149.avs",
		"/D/Temp/Movie/名探偵コナン/名探偵コナン 14番目の標的(ターゲット) [WOWOWプライム] 2018年07月23日(月)12時15分.avs",
		"/C/Users/YuniboA/Desktop/L-SMASH_Works_r935-2_plugins/AviSynth/Readme.txt",
		"/D/Temp/Movie/名探偵コナン/enc_20190117_134624_1596.avs",
		"/D/Temp/Movie/名探偵コナン/enc_20190117_134659_4315.avs",
		"/F/Playlist/1901_私に天使が舞い降りた！/player.avs",
		"/C/Users/YuniboA/Desktop/L-SMASH_Works_r935-2_plugins/Readme.txt",
		"/D/Temp/Movie/0000_新世紀ヱヴァンゲリヲン/新世紀エヴァンゲリオン 第壱話「使徒、襲来」 [WOWOWプライム] 2018年10月04日(木)25時00分.avs",
		"/D/Temp/Movie/0000_新世紀ヱヴァンゲリヲン/test.avs",
		"/D/Temp/Movie/0000_新世紀ヱヴァンゲリヲン/test.d2v",
		"/D/Temp/Movie/名探偵コナン/enc_20190116_134949_9496_src.d2v",
		"/F/Playlist/1901_私に天使が舞い降りた！/私に天使が舞い降りた！ 第1話「もにょっとした気持ち」 [BS11] 2019年01月09日(水)24時00分.csv"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"_2",
			"real",
			"estimate",
			"elv",
			"aci",
			"aircraft_t",
			"0",
			"55",
			"dum",
			"real",
			"tht",
			"ac_in",
			", ",
			"in",
			"         ",
			"angle_of_attack",
			"real(8) ::",
			"ix",
			"t+delta_t, ",
			"t+delta_t/2, ",
			"6.d0",
			"/deg",
			"radians * ",
			"/deg",
			"velocity",
			"real(8), intent(in)",
			"intent(in)",
			"real(8) function f",
			"v_ini",
			"phi",
			"theta",
			"tht",
			"mach_number",
			")*",
			"*rad",
			"psip",
			"phip",
			"thtt",
			")*",
			"*",
			"        &",
			"(n)",
			"delt",
			"(8)",
			",",
			"uu",
			"aircraft",
			"ma",
			"aoa",
			"get",
			"_next",
			"+",
			"real function",
			"real",
			"(t, ",
			"t, ",
			", allocatable",
			"xx",
			"\\"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "dofdof.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 429,
						"regions":
						{
						},
						"selection":
						[
							[
								93,
								93
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										209,
										210
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									]
								},
								"open":
								{
									"1":
									[
										202,
										203
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										93,
										94
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									]
								},
								"open":
								{
									"1":
									[
										87,
										88
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/yam/Studies/Projects/SixDoF/src/dof_main.f95",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2765,
						"regions":
						{
						},
						"selection":
						[
							[
								1137,
								1103
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Fortran/SublimeFortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 355.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/yam/Studies/Projects/SixDoF/.gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								29,
								29
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 150,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/yam/Studies/Projects/SixDoF/src/util.f08",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16638,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/Fortran/SublimeFortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/yam/Studies/Projects/SixDoF/src/initial_cond.inp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 627,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"in_converting": true,
							"origin_encoding": "SHIFT_JIS",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/yam/Studies/Projects/SixDoF/src/dof_kriging.f08",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4695,
						"regions":
						{
						},
						"selection":
						[
							[
								682,
								682
							],
							[
								695,
								695
							],
							[
								708,
								708
							],
							[
								2501,
								2501
							],
							[
								2514,
								2514
							],
							[
								2527,
								2527
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										684,
										685
									],
									"2":
									[
										699,
										700
									],
									"3":
									[
										714,
										715
									],
									"4":
									[
										2509,
										2510
									],
									"5":
									[
										2524,
										2525
									],
									"6":
									[
										2539,
										2540
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"2":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"3":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"4":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"5":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"6":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									]
								},
								"open":
								{
									"1":
									[
										672,
										673
									],
									"2":
									[
										687,
										688
									],
									"3":
									[
										702,
										703
									],
									"4":
									[
										2497,
										2498
									],
									"5":
									[
										2512,
										2513
									],
									"6":
									[
										2527,
										2528
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										682,
										683
									],
									"2":
									[
										695,
										696
									],
									"3":
									[
										708,
										709
									],
									"4":
									[
										2501,
										2502
									],
									"5":
									[
										2514,
										2515
									],
									"6":
									[
										2527,
										2528
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"2":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"3":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"4":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"5":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									],
									"6":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.quote"
									]
								},
								"open":
								{
									"1":
									[
										672,
										673
									],
									"2":
									[
										685,
										686
									],
									"3":
									[
										698,
										699
									],
									"4":
									[
										2491,
										2492
									],
									"5":
									[
										2504,
										2505
									],
									"6":
									[
										2517,
										2518
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/Fortran/SublimeFortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1939.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/yam/Studies/Projects/SixDoF/src/dof_rk4.f95",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 8437,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 166,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/Fortran/SublimeFortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/yam/Studies/Projects/SixDoF/src/dofdof.f08",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15748,
						"regions":
						{
						},
						"selection":
						[
							[
								13569,
								13569
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Fortran/SublimeFortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7531.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/yam/Studies/Projects/SixDoF/src/setup.bat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 781,
						"regions":
						{
						},
						"selection":
						[
							[
								380,
								380
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Batch File/Batch File.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "dofdof.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\yam\\Studies\\Projects\\ADR\\__local__\\adr.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 237.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
